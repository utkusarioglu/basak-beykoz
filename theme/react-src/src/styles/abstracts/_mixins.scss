/**
Draws oval area for the components
*/
@mixin frame-rounded-padded {
  padding: var(--sp);
  border-radius: var(--sp);

  @media screen and (min-width: 800px) {
    padding: calc(var(--sp) * 2);
  }
}

/**
Draws oval area for the components, this variant produces a
thinner vertical cross section. Good for objects such as buttons
*/
@mixin frame-rounded-padded-thin {
  padding: var(--sp);
  border-radius: var(--sp);

  @media screen and (min-width: 800px) {
    padding: var(--sp) calc(var(--sp) * 2);
  }
}

/**
makes the content edge to edge on mobile.
Width returns to 100% on bigger screns
*/
@mixin edge-to-edge {
  margin-left: calc(var(--sp) * -1);
  width: 100vw;

  @media screen and (min-width: 800px) {
    margin-left: 0;
    width: 100%;
  }
}

/**
Adds a standardized margin at the bottom of the 
consuming blocks;
*/
@mixin block-margin-bottom {
  margin-bottom: var(--sp);
}

/**
Creates the same footer shim padding that is created by the 
Standard.layout. This mixin is a must for pages that cannot use
the standard footer shim logic from the Standard.layout component
*/
@mixin footer-shim {
  padding-bottom: var(--height-footer-shim-mobile);

  @media screen and (min-width: #{$desktop-breakpoint}) {
    padding-bottom: var(--height-footer-shim-desktop);
  }
}


/**
Disables left and right paddings
*/
@mixin disable-horizontal-padding {
  padding-left: 0;
  padding-right: 0;
}

/**
Adds right and left padding with the standardized spacing --sp
*/
@mixin enable-horizontal-padding {
  padding-left: var(--sp);
  padding-right: var(--sp);
}
